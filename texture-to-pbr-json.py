import json
import sys

from pathlib import Path

data = {}
data["groups"] = []
data["features"] = []
data["meta"] = {}

input_path = Path(sys.argv[1])

data["meta"]["author"] = "Autogenerated"
data["meta"]["title"] = input_path.name

if len(sys.argv) == 3:
	shader_name = sys.argv[2]
else:
	shader_name = "color.glsl"

material_maps = {}
for p in input_path.glob('**/*.png'):
	if ".bak" in p.stem:
		continue

	if "_normal" in p.stem:
		key = p.stem.replace("_normal", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["NORMAL_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_norm" in p.stem:
		key = p.stem.replace("_norm", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["NORMAL_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_height" in p.stem:
		key = p.stem.replace("_height", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["HEIGHT_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_metallic" in p.stem:
		key = p.stem.replace("_metallic", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["METALLIC_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_metal" in p.stem:
		key = p.stem.replace("_metal", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["METALLIC_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_roughness" in p.stem:
		key = p.stem.replace("_roughness", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["ROUGHNESS_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_smoothness" in p.stem:
		key = p.stem.replace("_smoothness", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["ROUGHNESS_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_rough" in p.stem:
		key = p.stem.replace("_rough", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["ROUGHNESS_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_emissive" in p.stem:
		key = p.stem.replace("_emissive", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["EMISSIVE_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_occ" in p.stem:
		key = p.stem.replace("_occ", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["AMBIENT_OCCLUSION_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_ao" in p.stem:
		key = p.stem.replace("_ao", "")
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["AMBIENT_OCCLUSION_TEX"] = str(p.relative_to(input_path).as_posix())
	elif "_diffuse" in p.stem:
		continue
	elif "_base" in p.stem:
		continue
	elif p.suffix == ".mtz":
		continue
	else:
		key = p.stem
		if key not in material_maps:
			material_maps[key] = {}
		material_maps[key]["NORMAL_TEX"] = str(p.relative_to(input_path).as_posix())


for name, material_data in material_maps.items():
	target_draw_started = {}
	target_draw_started["type"] = "draw_started"
	target_draw_started["texture_filename"] = name
	
	target_loaded = {}
	target_loaded["type"] = "load_texture"
	target_loaded["texture_filename"] = name
	
	targets_arr = []
	targets_arr.append(target_draw_started)
	targets_arr.append(target_loaded)
	group = {}
	group["targets"] = targets_arr
	group["name"] = "ShaderTarget_" + name
	data["groups"].append(group)
	
	action_data = {}
	action_data["color_shader_path"] = shader_name
	action_data["inputs"] = []
	for code_name, path in material_data.items():
		input = {}
		input["texture_path"] = path
		input["code_name"] = code_name
		action_data["inputs"].append(input)
	
	feature = {}
	feature["group"] = "ShaderTarget_" + name
	feature["action"] = "custom_pixel"
	feature["action_data"] = action_data
	data["features"].append(feature)

file = input_path / 'metadata.json'
file.write_text(json.dumps(data, indent=4, sort_keys=True))
