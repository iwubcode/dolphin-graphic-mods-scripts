import json
import sys

from pathlib import Path

data = {}
data["groups"] = []
data["features"] = []
data["meta"] = {}
data["assets"] = {}

input_path = Path(sys.argv[1])

data["meta"]["author"] = "Autogenerated"
data["meta"]["title"] = input_path.name

texture_targets = {}
assets = []
for p in input_path.glob('**/*.png'):
	if ".bak" in p.stem:
		continue

	if "_normal" in p.stem:
		key = p.stem.replace("_normal", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_norm" in p.stem:
		key = p.stem.replace("_norm", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_height" in p.stem:
		key = p.stem.replace("_height", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_metallic" in p.stem:
		key = p.stem.replace("_metallic", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_metal" in p.stem:
		key = p.stem.replace("_metal", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_roughness" in p.stem:
		key = p.stem.replace("_roughness", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_smoothness" in p.stem:
		key = p.stem.replace("_smoothness", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_rough" in p.stem:
		key = p.stem.replace("_rough", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_emissive" in p.stem:
		key = p.stem.replace("_emissive", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_occ" in p.stem:
		key = p.stem.replace("_occ", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_ao" in p.stem:
		key = p.stem.replace("_ao", "")
		if key not in texture_targets:
			texture_targets[key] = ""
	elif "_diffuse" in p.stem:
		continue
	elif "_base" in p.stem:
		continue
	elif p.suffix == ".mtz":
		continue
	else:
		continue

	asset_map = {}
	asset_map[""] = str(p.relative_to(input_path).as_posix())
	asset_data = {}
	asset_data["name"] = "texture_" + p.stem
	asset_data["data"] = asset_map
	assets.append(asset_data)

for p in input_path.glob('**/*.json'):
	if ".bak" in p.stem:
		continue
	if ".shader" not in p.stem:
		continue

	name_without_extension = p.stem.split('.')[0]

	asset_map = {}
	
	shader_file = (p.parent / name_without_extension).with_suffix(".glsl")
	if not shader_file.exists():
		print(f"Expected shader file at {shader_file} not found.  Skipping")
		continue
	asset_map["metadata"] = str(p.relative_to(input_path).as_posix())
	asset_map["shader"] = str(shader_file.relative_to(input_path).as_posix())
	asset_data = {}
	asset_data["name"] = "shader_" + name_without_extension
	asset_data["data"] = asset_map
	assets.append(asset_data)

for p in input_path.glob('**/*.json'):
	if ".bak" in p.stem:
		continue
	if ".material" not in p.stem:
		continue

	name_without_extension = p.stem.split('.')[0]

	if name_without_extension in texture_targets:
		texture_targets[name_without_extension] = "material_" + name_without_extension
	
	asset_map = {}
	asset_map[""] = str(p.relative_to(input_path).as_posix())
	
	asset_data = {}
	asset_data["name"] = "material_" + name_without_extension
	asset_data["data"] = asset_map
	assets.append(asset_data)

data["assets"] = assets

for target_name, material in texture_targets.items():
	if material == "":
		print(f"Didn't find material for target '{target_name}'")
		continue
	target_draw_started = {}
	target_draw_started["type"] = "draw_started"
	target_draw_started["texture_filename"] = target_name
	
	target_created = {}
	target_created["type"] = "create_texture"
	target_created["texture_filename"] = target_name
	
	targets_arr = []
	targets_arr.append(target_draw_started)
	targets_arr.append(target_created)
	group = {}
	group["targets"] = targets_arr
	group["name"] = "ShaderTarget_" + target_name
	data["groups"].append(group)
	
	action_data = {}
	action_data["passes"] = []
	pass_data = {}
	pass_data["pixel_material_asset"] = material
	action_data["passes"].append(pass_data)
	
	feature = {}
	feature["group"] = "ShaderTarget_" + target_name
	feature["action"] = "custom_pipeline"
	feature["action_data"] = action_data
	data["features"].append(feature)

file = input_path / 'metadata.json'
file.write_text(json.dumps(data, indent=4, sort_keys=True))
